version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: secureops-postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-secureops}
      POSTGRES_USER: ${POSTGRES_USER:-secureops}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secureops123}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - secureops-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-secureops} -d ${POSTGRES_DB:-secureops}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: secureops-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - secureops-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: deployment/Dockerfile
    container_name: secureops-backend
    restart: always
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-secureops}:${POSTGRES_PASSWORD:-secureops123}@postgres:5432/${POSTGRES_DB:-secureops}
      REDIS_URL: redis://redis:6379/0
      
      # Application Configuration
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
      BASE_URL: ${BASE_URL:-http://localhost:8000}
      
      # Security Scanners
      TRIVY_ENABLED: ${TRIVY_ENABLED:-true}
      SAFETY_ENABLED: ${SAFETY_ENABLED:-true}
      BANDIT_ENABLED: ${BANDIT_ENABLED:-true}
      
      # Notifications
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_USE_TLS: ${SMTP_USE_TLS:-true}
      
      # CI/CD Integrations
      GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET:-}
      GITLAB_WEBHOOK_SECRET: ${GITLAB_WEBHOOK_SECRET:-}
      JENKINS_USERNAME: ${JENKINS_USERNAME:-}
      JENKINS_API_TOKEN: ${JENKINS_API_TOKEN:-}
      AZURE_DEVOPS_PAT: ${AZURE_DEVOPS_PAT:-}
      
      # External Services
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL:-}
      TEAMS_WEBHOOK_URL: ${TEAMS_WEBHOOK_URL:-}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./deployment:/app/deployment
      - scan_results:/app/scan_results
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - secureops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Celery Worker
  celery-worker:
    build:
      context: .
      dockerfile: deployment/Dockerfile
    container_name: secureops-celery-worker
    restart: always
    command: celery -A src.tasks.celery_app worker --loglevel=info --concurrency=4
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-secureops}:${POSTGRES_PASSWORD:-secureops123}@postgres:5432/${POSTGRES_DB:-secureops}
      REDIS_URL: redis://redis:6379/0
      
      # Application Configuration
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      
      # Security Scanners
      TRIVY_ENABLED: ${TRIVY_ENABLED:-true}
      SAFETY_ENABLED: ${SAFETY_ENABLED:-true}
      BANDIT_ENABLED: ${BANDIT_ENABLED:-true}
      
      # Notifications
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_USE_TLS: ${SMTP_USE_TLS:-true}
      
      # External Services
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL:-}
      TEAMS_WEBHOOK_URL: ${TEAMS_WEBHOOK_URL:-}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
    volumes:
      - ./src:/app/src
      - scan_results:/app/scan_results
      - /var/run/docker.sock:/var/run/docker.sock  # For container scanning
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - secureops-network

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: deployment/Dockerfile
    container_name: secureops-celery-beat
    restart: always
    command: celery -A src.tasks.celery_app beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-secureops}:${POSTGRES_PASSWORD:-secureops123}@postgres:5432/${POSTGRES_DB:-secureops}
      REDIS_URL: redis://redis:6379/0
      
      # Application Configuration
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
    volumes:
      - ./src:/app/src
      - celery_beat_data:/app/celerybeat-schedule
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - secureops-network

  # React Frontend
  frontend:
    build:
      context: .
      dockerfile: deployment/frontend.Dockerfile
    container_name: secureops-frontend
    restart: always
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
      REACT_APP_ENVIRONMENT: ${ENVIRONMENT:-development}
      REACT_APP_VERSION: ${APP_VERSION:-1.0.0}
      REACT_APP_ENABLE_ANALYTICS: ${REACT_APP_ENABLE_ANALYTICS:-false}
    ports:
      - "3000:3000"
    volumes:
      - ./src/frontend:/app/src
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    networks:
      - secureops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: secureops-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - secureops-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: secureops-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - secureops-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: secureops-grafana
    restart: always
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - secureops-network

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: secureops-jaeger
    restart: always
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    volumes:
      - jaeger_data:/badger
    networks:
      - secureops-network

  # Security Scanner Services (Optional)
  trivy:
    image: aquasec/trivy:latest
    container_name: secureops-trivy
    restart: "no"
    volumes:
      - trivy_cache:/root/.cache/trivy
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - secureops-network
    profiles:
      - scanners

  # ElasticSearch for Log Aggregation (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    container_name: secureops-elasticsearch
    restart: always
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      xpack.security.enabled: false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - secureops-network
    profiles:
      - logging

  # Kibana for Log Visualization (Optional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.0
    container_name: secureops-kibana
    restart: always
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - secureops-network
    profiles:
      - logging

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  scan_results:
    driver: local
  celery_beat_data:
    driver: local
  frontend_node_modules:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local
  trivy_cache:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  secureops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
