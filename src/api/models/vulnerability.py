"""
Vulnerability models for security findings and vulnerability management.
"""

from datetime import datetime
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, HttpUrl, validator
from sqlalchemy import (
    JSON,
    Boolean,
    Column,
    DateTime,
    Float,
    ForeignKey,
    Integer,
    String,
    Text,
)
from sqlalchemy.orm import relationship

from .base import Base, BaseResponse, IDMixin, SeverityLevel, TimestampMixin
from .pipeline import Pipeline, PipelineRun
from .user import User


class Vulnerability(Base, IDMixin, TimestampMixin):
    """Vulnerability model for tracking security findings across pipelines."""

    __tablename__ = "vulnerabilities"

    # Vulnerability identification
    title = Column(String(500), nullable=False, index=True)
    description = Column(Text, nullable=True)
    vulnerability_id = Column(String(100), nullable=True, index=True)  # CVE, CWE, etc.
    source_scanner = Column(
        String(100), nullable=False, index=True
    )  # bandit, safety, semgrep, etc.

    # Severity and classification
    severity = Column(
        String(20), nullable=False, index=True
    )  # critical, high, medium, low, info
    confidence = Column(String(20), nullable=True)  # high, medium, low
    category = Column(
        String(100), nullable=True, index=True
    )  # SQL injection, XSS, etc.
    cwe_id = Column(
        String(20), nullable=True, index=True
    )  # Common Weakness Enumeration

    # Location and context
    file_path = Column(String(1000), nullable=True)
    line_number = Column(Integer, nullable=True)
    column_number = Column(Integer, nullable=True)
    function_name = Column(String(255), nullable=True)
    code_snippet = Column(Text, nullable=True)

    # CVSS scoring
    cvss_version = Column(String(10), nullable=True)  # 3.1, 3.0, 2.0
    cvss_vector = Column(String(200), nullable=True)
    cvss_base_score = Column(Float, nullable=True)
    cvss_temporal_score = Column(Float, nullable=True)
    cvss_environmental_score = Column(Float, nullable=True)

    # Status and management
    status = Column(
        String(50), default="open", nullable=False, index=True
    )  # open, resolved, suppressed, false_positive
    resolution = Column(Text, nullable=True)
    suppression_reason = Column(Text, nullable=True)

    # Timeline tracking
    first_detected_at = Column(DateTime(timezone=True), nullable=False, index=True)
    last_detected_at = Column(DateTime(timezone=True), nullable=False, index=True)
    resolved_at = Column(DateTime(timezone=True), nullable=True)

    # Remediation
    remediation_advice = Column(Text, nullable=True)
    fix_available = Column(Boolean, default=False, nullable=False)
    fix_version = Column(String(100), nullable=True)
    patch_url = Column(Text, nullable=True)

    # References and links
    references = Column(JSON, nullable=True)  # List of reference URLs
    vendor_advisory = Column(Text, nullable=True)

    # Risk assessment
    exploitability = Column(String(20), nullable=True)  # high, medium, low
    impact = Column(String(20), nullable=True)  # high, medium, low
    risk_score = Column(Float, nullable=True)  # Custom calculated risk score

    # Dependencies (for dependency vulnerabilities)
    package_name = Column(String(255), nullable=True, index=True)
    package_version = Column(String(100), nullable=True)
    package_ecosystem = Column(String(50), nullable=True)  # npm, pip, maven, etc.

    # Docker/Container specific
    image_name = Column(String(500), nullable=True)
    image_tag = Column(String(100), nullable=True)
    layer_hash = Column(String(100), nullable=True)

    # Relationships
    pipeline_id = Column(Integer, ForeignKey("pipelines.id"), nullable=True, index=True)
    pipeline_run_id = Column(
        Integer, ForeignKey("pipeline_runs.id"), nullable=True, index=True
    )
    assigned_to_id = Column(Integer, ForeignKey("users.id"), nullable=True)

    pipeline = relationship("Pipeline", back_populates="vulnerabilities")
    pipeline_run = relationship("PipelineRun", back_populates="vulnerabilities")
    assigned_to = relationship("User", backref="assigned_vulnerabilities")
    alerts = relationship("Alert", back_populates="vulnerability")

    # Metadata
    metadata = Column(JSON, nullable=True)  # Additional scanner-specific data

    def calculate_risk_score(self) -> float:
        """Calculate a composite risk score based on severity, exploitability, and impact."""
        severity_weights = {
            SeverityLevel.CRITICAL: 10.0,
            SeverityLevel.HIGH: 7.5,
            SeverityLevel.MEDIUM: 5.0,
            SeverityLevel.LOW: 2.5,
            SeverityLevel.INFO: 1.0,
        }

        exploitability_weights = {"high": 3.0, "medium": 2.0, "low": 1.0}

        impact_weights = {"high": 3.0, "medium": 2.0, "low": 1.0}

        base_score = severity_weights.get(self.severity, 5.0)
        exploit_multiplier = exploitability_weights.get(self.exploitability, 2.0)
        impact_multiplier = impact_weights.get(self.impact, 2.0)

        # Include CVSS score if available
        cvss_factor = 1.0
        if self.cvss_base_score:
            cvss_factor = self.cvss_base_score / 10.0

        risk_score = base_score * exploit_multiplier * impact_multiplier * cvss_factor
        return min(risk_score, 100.0)  # Cap at 100


# Pydantic models for API serialization
class VulnerabilityBase(BaseModel):
    """Base vulnerability model with common fields."""

    title: str = Field(..., min_length=1, max_length=500)
    description: Optional[str] = None
    vulnerability_id: Optional[str] = Field(None, max_length=100)
    source_scanner: str = Field(..., max_length=100)
    severity: str = Field(..., regex="^(critical|high|medium|low|info)$")
    confidence: Optional[str] = Field(None, regex="^(high|medium|low)$")
    category: Optional[str] = Field(None, max_length=100)
    cwe_id: Optional[str] = Field(None, max_length=20)

    @validator("cwe_id")
    def validate_cwe_id(cls, v):
        if v and not v.startswith("CWE-"):
            return f"CWE-{v}"
        return v


class VulnerabilityCreate(VulnerabilityBase):
    """Model for vulnerability creation."""

    file_path: Optional[str] = Field(None, max_length=1000)
    line_number: Optional[int] = Field(None, ge=1)
    column_number: Optional[int] = Field(None, ge=1)
    function_name: Optional[str] = Field(None, max_length=255)
    code_snippet: Optional[str] = None

    cvss_version: Optional[str] = Field(None, regex=r"^(3\.1|3\.0|2\.0)$")
    cvss_vector: Optional[str] = Field(None, max_length=200)
    cvss_base_score: Optional[float] = Field(None, ge=0.0, le=10.0)

    remediation_advice: Optional[str] = None
    fix_available: bool = Field(default=False)
    fix_version: Optional[str] = Field(None, max_length=100)
    patch_url: Optional[HttpUrl] = None

    references: Optional[List[str]] = None
    exploitability: Optional[str] = Field(None, regex="^(high|medium|low)$")
    impact: Optional[str] = Field(None, regex="^(high|medium|low)$")

    package_name: Optional[str] = Field(None, max_length=255)
    package_version: Optional[str] = Field(None, max_length=100)
    package_ecosystem: Optional[str] = Field(None, max_length=50)

    image_name: Optional[str] = Field(None, max_length=500)
    image_tag: Optional[str] = Field(None, max_length=100)

    pipeline_id: Optional[int] = None
    pipeline_run_id: Optional[int] = None
    metadata: Optional[Dict[str, Any]] = None


class VulnerabilityUpdate(BaseModel):
    """Model for vulnerability updates."""

    status: Optional[str] = Field(
        None, regex="^(open|resolved|suppressed|false_positive)$"
    )
    resolution: Optional[str] = None
    suppression_reason: Optional[str] = None
    assigned_to_id: Optional[int] = None

    # Allow updating remediation information
    remediation_advice: Optional[str] = None
    fix_available: Optional[bool] = None
    fix_version: Optional[str] = Field(None, max_length=100)
    patch_url: Optional[HttpUrl] = None


class VulnerabilityResponse(VulnerabilityBase, BaseResponse):
    """Model for vulnerability API responses."""

    status: str
    first_detected_at: datetime
    last_detected_at: datetime
    resolved_at: Optional[datetime] = None

    file_path: Optional[str] = None
    line_number: Optional[int] = None
    column_number: Optional[int] = None
    function_name: Optional[str] = None

    cvss_base_score: Optional[float] = None
    cvss_temporal_score: Optional[float] = None
    cvss_environmental_score: Optional[float] = None

    risk_score: Optional[float] = None
    exploitability: Optional[str] = None
    impact: Optional[str] = None

    package_name: Optional[str] = None
    package_version: Optional[str] = None
    package_ecosystem: Optional[str] = None

    image_name: Optional[str] = None
    image_tag: Optional[str] = None

    fix_available: bool
    fix_version: Optional[str] = None
    references: Optional[List[str]] = None

    pipeline_id: Optional[int] = None
    pipeline_run_id: Optional[int] = None
    assigned_to_id: Optional[int] = None

    class Config:
        from_attributes = True


class VulnerabilityStats(BaseModel):
    """Vulnerability statistics and metrics."""

    total_vulnerabilities: int
    open_vulnerabilities: int
    resolved_vulnerabilities: int
    suppressed_vulnerabilities: int

    critical_count: int
    high_count: int
    medium_count: int
    low_count: int
    info_count: int

    by_category: Dict[str, int]
    by_scanner: Dict[str, int]
    by_package: Dict[str, int]

    average_resolution_time: Optional[float] = None  # Days
    vulnerability_trend: List[Dict[str, Any]]  # Time series data


class VulnerabilityTrend(BaseModel):
    """Vulnerability trend data point."""

    date: datetime
    total: int
    critical: int
    high: int
    medium: int
    low: int
    info: int
    resolved: int


class VulnerabilityScanResult(BaseModel):
    """Result of a vulnerability scan."""

    scan_id: str
    scanner_name: str
    scan_started_at: datetime
    scan_completed_at: Optional[datetime] = None
    status: str  # running, completed, failed

    vulnerabilities_found: int
    new_vulnerabilities: int
    resolved_vulnerabilities: int

    critical_count: int
    high_count: int
    medium_count: int
    low_count: int
    info_count: int

    scan_summary: Optional[str] = None
    error_message: Optional[str] = None

    class Config:
        schema_extra = {
            "example": {
                "scan_id": "scan-123456",
                "scanner_name": "bandit",
                "scan_started_at": "2023-10-17T12:00:00Z",
                "scan_completed_at": "2023-10-17T12:05:00Z",
                "status": "completed",
                "vulnerabilities_found": 15,
                "new_vulnerabilities": 3,
                "resolved_vulnerabilities": 2,
                "critical_count": 1,
                "high_count": 4,
                "medium_count": 7,
                "low_count": 3,
                "info_count": 0,
                "scan_summary": "Found 15 security issues across 8 files",
            }
        }
