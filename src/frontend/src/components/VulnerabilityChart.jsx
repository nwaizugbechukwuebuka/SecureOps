import React from 'react'
import { 
  ResponsiveContainer, 
  LineChart, 
  Line, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  Legend,
  AreaChart,
  Area 
} from 'recharts'
import { format, parseISO } from 'date-fns'

const VulnerabilityChart = ({ data = [], timeRange = '24h' }) => {
  // Transform data for chart
  const chartData = data.map(item => ({
    ...item,
    date: typeof item.date === 'string' ? parseISO(item.date) : item.date,
    total: item.critical + item.high + item.medium + item.low + (item.info || 0),
  }))

  // Format date based on time range
  const formatDate = (date) => {
    if (timeRange === '1h' || timeRange === '6h') {
      return format(date, 'HH:mm')
    } else if (timeRange === '24h') {
      return format(date, 'HH:mm')
    } else if (timeRange === '7d') {
      return format(date, 'MMM dd')
    } else {
      return format(date, 'MMM dd')
    }
  }

  const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload.length) {
      const data = payload[0].payload
      return (
        <div className="bg-white dark:bg-gray-800 p-4 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg">
          <p className="font-medium text-gray-900 dark:text-white mb-2">
            {typeof label === 'string' ? label : formatDate(label)}
          </p>
          <div className="space-y-1">
            <div className="flex items-center justify-between space-x-4">
              <span className="flex items-center">
                <div className="w-3 h-3 bg-red-500 rounded-full mr-2" />
                Critical
              </span>
              <span className="font-medium">{data.critical || 0}</span>
            </div>
            <div className="flex items-center justify-between space-x-4">
              <span className="flex items-center">
                <div className="w-3 h-3 bg-orange-500 rounded-full mr-2" />
                High
              </span>
              <span className="font-medium">{data.high || 0}</span>
            </div>
            <div className="flex items-center justify-between space-x-4">
              <span className="flex items-center">
                <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2" />
                Medium
              </span>
              <span className="font-medium">{data.medium || 0}</span>
            </div>
            <div className="flex items-center justify-between space-x-4">
              <span className="flex items-center">
                <div className="w-3 h-3 bg-blue-500 rounded-full mr-2" />
                Low
              </span>
              <span className="font-medium">{data.low || 0}</span>
            </div>
            <hr className="my-2 border-gray-200 dark:border-gray-600" />
            <div className="flex items-center justify-between space-x-4 font-semibold">
              <span>Total</span>
              <span>{data.total || 0}</span>
            </div>
          </div>
        </div>
      )
    }
    return null
  }

  if (!data || data.length === 0) {
    return (
      <div className="h-64 flex items-center justify-center text-gray-500 dark:text-gray-400">
        <div className="text-center">
          <div className="text-4xl mb-2">ðŸ“Š</div>
          <p>No vulnerability data available</p>
        </div>
      </div>
    )
  }

  return (
    <div className="h-64">
      <ResponsiveContainer width="100%" height="100%">
        <AreaChart data={chartData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
          <defs>
            <linearGradient id="criticalGradient" x1="0" y1="0" x2="0" y2="1">
              <stop offset="5%" stopColor="#EF4444" stopOpacity={0.8}/>
              <stop offset="95%" stopColor="#EF4444" stopOpacity={0.1}/>
            </linearGradient>
            <linearGradient id="highGradient" x1="0" y1="0" x2="0" y2="1">
              <stop offset="5%" stopColor="#F97316" stopOpacity={0.8}/>
              <stop offset="95%" stopColor="#F97316" stopOpacity={0.1}/>
            </linearGradient>
            <linearGradient id="mediumGradient" x1="0" y1="0" x2="0" y2="1">
              <stop offset="5%" stopColor="#EAB308" stopOpacity={0.8}/>
              <stop offset="95%" stopColor="#EAB308" stopOpacity={0.1}/>
            </linearGradient>
            <linearGradient id="lowGradient" x1="0" y1="0" x2="0" y2="1">
              <stop offset="5%" stopColor="#3B82F6" stopOpacity={0.8}/>
              <stop offset="95%" stopColor="#3B82F6" stopOpacity={0.1}/>
            </linearGradient>
          </defs>
          
          <CartesianGrid 
            strokeDasharray="3 3" 
            className="stroke-gray-200 dark:stroke-gray-600"
          />
          
          <XAxis 
            dataKey="date"
            tickFormatter={formatDate}
            className="text-gray-600 dark:text-gray-400"
            tick={{ fontSize: 12 }}
          />
          
          <YAxis 
            className="text-gray-600 dark:text-gray-400"
            tick={{ fontSize: 12 }}
          />
          
          <Tooltip content={<CustomTooltip />} />
          
          <Legend 
            wrapperStyle={{ paddingTop: '20px' }}
            iconType="circle"
          />
          
          {/* Stacked areas for each severity level */}
          <Area
            type="monotone"
            dataKey="critical"
            stackId="1"
            stroke="#EF4444"
            fill="url(#criticalGradient)"
            strokeWidth={2}
            name="Critical"
          />
          <Area
            type="monotone"
            dataKey="high"
            stackId="1"
            stroke="#F97316"
            fill="url(#highGradient)"
            strokeWidth={2}
            name="High"
          />
          <Area
            type="monotone"
            dataKey="medium"
            stackId="1"
            stroke="#EAB308"
            fill="url(#mediumGradient)"
            strokeWidth={2}
            name="Medium"
          />
          <Area
            type="monotone"
            dataKey="low"
            stackId="1"
            stroke="#3B82F6"
            fill="url(#lowGradient)"
            strokeWidth={2}
            name="Low"
          />
        </AreaChart>
      </ResponsiveContainer>
    </div>
  )
}

export default VulnerabilityChart