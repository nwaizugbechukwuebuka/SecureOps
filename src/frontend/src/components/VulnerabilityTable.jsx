import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TablePagination,
  TableSortLabel,
  Chip,
  IconButton,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Tooltip,
  Alert,
  Skeleton,
  useTheme,
  alpha,
  Paper,
  Collapse,
  Stack,
  Grid,
  Link,
  Accordion,
  AccordionSummary,
  AccordionDetails
} from '@mui/material';
import {
  Error as ErrorIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
  CheckCircle as CheckCircleIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
  Visibility as VisibilityIcon,
  Edit as EditIcon,
  Close as CloseIcon,
  FilterList as FilterListIcon,
  Refresh as RefreshIcon,
  Assignment as AssignmentIcon,
  Schedule as ScheduleIcon,
  Link as LinkIcon,
  Code as CodeIcon,
  Security as SecurityIcon,
  Build as BuildIcon,
  GetApp as GetAppIcon,
  OpenInNew as OpenInNewIcon
} from '@mui/icons-material';
import { formatDistanceToNow, parseISO, format } from 'date-fns';
import { api } from '../services/api';
import { useWebSocket } from '../services/websocket';

const VulnerabilityTable = ({ 
  limit = 50, 
  showFilters = true, 
  showPagination = true,
  embedded = false,
  onVulnerabilityClick = null,
  pipelineFilter = null 
}) => {
  const theme = useTheme();
  const { realTimeVulnerabilities } = useWebSocket();
  
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(limit);
  const [totalCount, setTotalCount] = useState(0);
  const [orderBy, setOrderBy] = useState('created_at');
  const [order, setOrder] = useState('desc');
  const [selectedVuln, setSelectedVuln] = useState(null);
  const [detailsOpen, setDetailsOpen] = useState(false);
  const [filtersOpen, setFiltersOpen] = useState(false);
  const [expandedRows, setExpandedRows] = useState({});
  
  // Filters
  const [filters, setFilters] = useState({
    severity: '',
    status: '',
    type: '',
    pipeline: pipelineFilter || '',
    package: '',
    language: '',
    scanner: '',
    dateFrom: '',
    dateTo: ''
  });

  const severityConfig = {
    critical: { color: 'error', icon: ErrorIcon, label: 'Critical', priority: 4 },
    high: { color: 'warning', icon: WarningIcon, label: 'High', priority: 3 },
    medium: { color: 'info', icon: InfoIcon, label: 'Medium', priority: 2 },
    low: { color: 'success', icon: CheckCircleIcon, label: 'Low', priority: 1 },
    info: { color: 'default', icon: InfoIcon, label: 'Info', priority: 0 }
  };

  const statusConfig = {
    open: { color: 'error', label: 'Open' },
    acknowledged: { color: 'warning', label: 'Acknowledged' },
    resolved: { color: 'success', label: 'Resolved' },
    false_positive: { color: 'info', label: 'False Positive' },
    wont_fix: { color: 'default', label: "Won't Fix" },
    deferred: { color: 'warning', label: 'Deferred' }
  };

  const scannerConfig = {
    trivy: { name: 'Trivy', icon: SecurityIcon },
    safety: { name: 'Safety', icon: CodeIcon },
    bandit: { name: 'Bandit', icon: CodeIcon },
    secret_scanner: { name: 'Secret Scanner', icon: SecurityIcon },
    docker_scanner: { name: 'Docker Scanner', icon: BuildIcon },
    policy_checker: { name: 'Policy Checker', icon: AssignmentIcon }
  };

  useEffect(() => {
    loadVulnerabilities();
  }, [page, rowsPerPage, orderBy, order, filters]);

  useEffect(() => {
    if (realTimeVulnerabilities) {
      setVulnerabilities(prev => [realTimeVulnerabilities, ...prev.slice(0, -1)]);
    }
  }, [realTimeVulnerabilities]);

  const loadVulnerabilities = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const params = {
        page: page + 1,
        limit: rowsPerPage,
        sort_by: orderBy,
        sort_order: order,
        ...Object.fromEntries(
          Object.entries(filters).filter(([_, value]) => value !== '')
        )
      };
      
      const response = await api.get('/vulnerabilities', { params });
      setVulnerabilities(response.data.vulnerabilities || []);
      setTotalCount(response.data.total || 0);
    } catch (err) {
      setError('Failed to load vulnerabilities');
      console.error('Vulnerabilities error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const handleRequestSort = (property) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  };

  const handleFilterChange = (field, value) => {
    setFilters(prev => ({ ...prev, [field]: value }));
    setPage(0);
  };

  const handleVulnAction = async (vulnId, action, data = {}) => {
    try {
      await api.patch(`/vulnerabilities/${vulnId}`, { action, ...data });
      await loadVulnerabilities();
    } catch (err) {
      console.error('Vulnerability action error:', err);
    }
  };

  const handleViewDetails = (vuln) => {
    setSelectedVuln(vuln);
    setDetailsOpen(true);
    if (onVulnerabilityClick) onVulnerabilityClick(vuln);
  };

  const handleExpandRow = (vulnId) => {
    setExpandedRows(prev => ({
      ...prev,
      [vulnId]: !prev[vulnId]
    }));
  };

  const handleExportResults = async () => {
    try {
      const params = {
        ...Object.fromEntries(
          Object.entries(filters).filter(([_, value]) => value !== '')
        ),
        export: true
      };
      
      const response = await api.get('/vulnerabilities/export', { 
        params,
        responseType: 'blob'
      });
      
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `vulnerabilities_${new Date().toISOString().split('T')[0]}.csv`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
    } catch (err) {
      console.error('Export error:', err);
    }
  };

  const getSeverityIcon = (severity) => {
    const config = severityConfig[severity] || severityConfig.low;
    const IconComponent = config.icon;
    return <IconComponent sx={{ fontSize: 16, color: theme.palette[config.color].main }} />;
  };

  const getSeverityChip = (severity) => {
    const config = severityConfig[severity] || severityConfig.low;
    return (
      <Chip 
        size="small" 
        label={config.label}
        color={config.color}
        icon={getSeverityIcon(severity)}
        sx={{ minWidth: 80 }}
      />
    );
  };

  const getStatusChip = (status) => {
    const config = statusConfig[status] || statusConfig.open;
    return (
      <Chip 
        size="small" 
        label={config.label}
        color={config.color}
        variant="outlined"
        sx={{ minWidth: 90 }}
      />
    );
  };

  const getScannerChip = (scanner) => {
    const config = scannerConfig[scanner] || { name: scanner, icon: SecurityIcon };
    const IconComponent = config.icon;
    return (
      <Chip 
        size="small" 
        label={config.name}
        icon={<IconComponent sx={{ fontSize: 14 }} />}
        variant="outlined"
        sx={{ minWidth: 80 }}
      />
    );
  };

  const formatDateTime = (timestamp) => {
    try {
      const date = typeof timestamp === 'string' ? parseISO(timestamp) : timestamp;
      return format(date, 'MMM d, yyyy HH:mm');
    } catch (err) {
      return 'Invalid date';
    }
  };

  const formatTimeAgo = (timestamp) => {
    try {
      const date = typeof timestamp === 'string' ? parseISO(timestamp) : timestamp;
      return formatDistanceToNow(date, { addSuffix: true });
    } catch (err) {
      return 'Unknown time';
    }
  };

  const getCVSSScore = (vuln) => {
    if (vuln.cvss_score) {
      const score = parseFloat(vuln.cvss_score);
      const color = score >= 9 ? 'error' : score >= 7 ? 'warning' : score >= 4 ? 'info' : 'success';
      return (
        <Chip 
          size="small" 
          label={`CVSS: ${score.toFixed(1)}`}
          color={color}
          variant="outlined"
        />
      );
    }
    return null;
  };

  if (loading && vulnerabilities.length === 0) {
    return (
      <Card sx={{ width: '100%' }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>Vulnerabilities</Typography>
          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  {['Severity', 'Title', 'Package', 'Status', 'Scanner', 'Created', 'Actions'].map((header) => (
                    <TableCell key={header}>
                      <Skeleton variant="text" />
                    </TableCell>
                  ))}
                </TableRow>
              </TableHead>
              <TableBody>
                {[...Array(5)].map((_, index) => (
                  <TableRow key={index}>
                    {[...Array(7)].map((_, cellIndex) => (
                      <TableCell key={cellIndex}>
                        <Skeleton variant="text" />
                      </TableCell>
                    ))}
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card sx={{ width: '100%' }}>
        <CardContent>
          <Alert 
            severity="error" 
            action={
              <IconButton color="inherit" size="small" onClick={loadVulnerabilities}>
                <RefreshIcon />
              </IconButton>
            }
          >
            {error}
          </Alert>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card sx={{ width: '100%' }}>
      <CardContent>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="h6">
            Vulnerabilities {totalCount > 0 && `(${totalCount})`}
          </Typography>
          <Box sx={{ display: 'flex', gap: 1 }}>
            {showFilters && (
              <Tooltip title="Toggle filters">
                <IconButton size="small" onClick={() => setFiltersOpen(!filtersOpen)}>
                  <FilterListIcon />
                </IconButton>
              </Tooltip>
            )}
            <Tooltip title="Export results">
              <IconButton size="small" onClick={handleExportResults}>
                <GetAppIcon />
              </IconButton>
            </Tooltip>
            <Tooltip title="Refresh">
              <IconButton size="small" onClick={loadVulnerabilities}>
                <RefreshIcon />
              </IconButton>
            </Tooltip>
          </Box>
        </Box>

        {/* Filters */}
        {showFilters && (
          <Collapse in={filtersOpen}>
            <Paper sx={{ p: 2, mb: 2, backgroundColor: alpha(theme.palette.primary.main, 0.05) }}>
              <Typography variant="subtitle2" gutterBottom>Filters</Typography>
              <Grid container spacing={2}>
                <Grid item xs={12} sm={6} md={2}>
                  <FormControl size="small" fullWidth>
                    <InputLabel>Severity</InputLabel>
                    <Select
                      value={filters.severity}
                      label="Severity"
                      onChange={(e) => handleFilterChange('severity', e.target.value)}
                    >
                      <MenuItem value="">All</MenuItem>
                      <MenuItem value="critical">Critical</MenuItem>
                      <MenuItem value="high">High</MenuItem>
                      <MenuItem value="medium">Medium</MenuItem>
                      <MenuItem value="low">Low</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>

                <Grid item xs={12} sm={6} md={2}>
                  <FormControl size="small" fullWidth>
                    <InputLabel>Status</InputLabel>
                    <Select
                      value={filters.status}
                      label="Status"
                      onChange={(e) => handleFilterChange('status', e.target.value)}
                    >
                      <MenuItem value="">All</MenuItem>
                      <MenuItem value="open">Open</MenuItem>
                      <MenuItem value="acknowledged">Acknowledged</MenuItem>
                      <MenuItem value="resolved">Resolved</MenuItem>
                      <MenuItem value="false_positive">False Positive</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>

                <Grid item xs={12} sm={6} md={2}>
                  <FormControl size="small" fullWidth>
                    <InputLabel>Scanner</InputLabel>
                    <Select
                      value={filters.scanner}
                      label="Scanner"
                      onChange={(e) => handleFilterChange('scanner', e.target.value)}
                    >
                      <MenuItem value="">All</MenuItem>
                      <MenuItem value="trivy">Trivy</MenuItem>
                      <MenuItem value="safety">Safety</MenuItem>
                      <MenuItem value="bandit">Bandit</MenuItem>
                      <MenuItem value="secret_scanner">Secret Scanner</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>

                <Grid item xs={12} sm={6} md={2}>
                  <TextField
                    size="small"
                    label="Package"
                    value={filters.package}
                    onChange={(e) => handleFilterChange('package', e.target.value)}
                    fullWidth
                  />
                </Grid>

                <Grid item xs={12} sm={6} md={2}>
                  <TextField
                    size="small"
                    label="Language"
                    value={filters.language}
                    onChange={(e) => handleFilterChange('language', e.target.value)}
                    fullWidth
                  />
                </Grid>

                <Grid item xs={12} sm={6} md={2}>
                  <TextField
                    size="small"
                    label="Pipeline"
                    value={filters.pipeline}
                    onChange={(e) => handleFilterChange('pipeline', e.target.value)}
                    fullWidth
                    disabled={!!pipelineFilter}
                  />
                </Grid>
              </Grid>
            </Paper>
          </Collapse>
        )}

        {/* Vulnerabilities Table */}
        <TableContainer>
          <Table size={embedded ? "small" : "medium"}>
            <TableHead>
              <TableRow>
                <TableCell width="20"></TableCell>
                <TableCell>
                  <TableSortLabel
                    active={orderBy === 'severity'}
                    direction={orderBy === 'severity' ? order : 'asc'}
                    onClick={() => handleRequestSort('severity')}
                  >
                    Severity
                  </TableSortLabel>
                </TableCell>
                <TableCell>
                  <TableSortLabel
                    active={orderBy === 'title'}
                    direction={orderBy === 'title' ? order : 'asc'}
                    onClick={() => handleRequestSort('title')}
                  >
                    Vulnerability
                  </TableSortLabel>
                </TableCell>
                <TableCell>Package/Component</TableCell>
                <TableCell>Scanner</TableCell>
                <TableCell>Status</TableCell>
                <TableCell>
                  <TableSortLabel
                    active={orderBy === 'created_at'}
                    direction={orderBy === 'created_at' ? order : 'asc'}
                    onClick={() => handleRequestSort('created_at')}
                  >
                    Detected
                  </TableSortLabel>
                </TableCell>
                <TableCell align="right">Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {vulnerabilities.map((vuln) => (
                <React.Fragment key={vuln.id}>
                  <TableRow 
                    hover
                    sx={{ 
                      '&:last-child td, &:last-child th': { border: 0 },
                      cursor: 'pointer'
                    }}
                  >
                    <TableCell>
                      <IconButton 
                        size="small" 
                        onClick={() => handleExpandRow(vuln.id)}
                      >
                        {expandedRows[vuln.id] ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                      </IconButton>
                    </TableCell>
                    
                    <TableCell>
                      {getSeverityChip(vuln.severity)}
                    </TableCell>
                    
                    <TableCell>
                      <Typography variant="body2" sx={{ fontWeight: 500 }}>
                        {vuln.title || vuln.vulnerability_id}
                      </Typography>
                      <Box sx={{ display: 'flex', gap: 0.5, mt: 0.5 }}>
                        {getCVSSScore(vuln)}
                        {vuln.cve_id && (
                          <Chip 
                            size="small" 
                            label={vuln.cve_id}
                            variant="outlined"
                            component={Link}
                            href={`https://nvd.nist.gov/vuln/detail/${vuln.cve_id}`}
                            target="_blank"
                            clickable
                          />
                        )}
                      </Box>
                    </TableCell>
                    
                    <TableCell>
                      <Typography variant="body2">
                        {vuln.package_name || vuln.component}
                      </Typography>
                      {vuln.version && (
                        <Typography variant="caption" color="text.secondary">
                          v{vuln.version}
                        </Typography>
                      )}
                    </TableCell>
                    
                    <TableCell>
                      {getScannerChip(vuln.scanner_type)}
                    </TableCell>
                    
                    <TableCell>
                      {getStatusChip(vuln.status)}
                    </TableCell>
                    
                    <TableCell>
                      <Typography variant="body2">
                        {formatDateTime(vuln.created_at)}
                      </Typography>
                      <Typography variant="caption" color="text.secondary">
                        {formatTimeAgo(vuln.created_at)}
                      </Typography>
                    </TableCell>
                    
                    <TableCell align="right">
                      <Box sx={{ display: 'flex', gap: 0.5 }}>
                        <Tooltip title="View details">
                          <IconButton size="small" onClick={() => handleViewDetails(vuln)}>
                            <VisibilityIcon />
                          </IconButton>
                        </Tooltip>
                        {vuln.status === 'open' && (
                          <Tooltip title="Mark as resolved">
                            <IconButton 
                              size="small" 
                              onClick={() => handleVulnAction(vuln.id, 'resolve')}
                            >
                              <CheckCircleIcon />
                            </IconButton>
                          </Tooltip>
                        )}
                        {vuln.external_url && (
                          <Tooltip title="View external reference">
                            <IconButton 
                              size="small"
                              component={Link}
                              href={vuln.external_url}
                              target="_blank"
                            >
                              <OpenInNewIcon />
                            </IconButton>
                          </Tooltip>
                        )}
                      </Box>
                    </TableCell>
                  </TableRow>
                  
                  {/* Expanded Row Details */}
                  <TableRow>
                    <TableCell colSpan={8} sx={{ py: 0 }}>
                      <Collapse in={expandedRows[vuln.id]}>
                        <Box sx={{ p: 2, backgroundColor: alpha(theme.palette.background.default, 0.5) }}>
                          <Grid container spacing={2}>
                            <Grid item xs={12} md={6}>
                              <Typography variant="subtitle2" gutterBottom>
                                Description
                              </Typography>
                              <Typography variant="body2" paragraph>
                                {vuln.description || 'No description available'}
                              </Typography>
                              
                              {vuln.remediation && (
                                <>
                                  <Typography variant="subtitle2" gutterBottom>
                                    Remediation
                                  </Typography>
                                  <Typography variant="body2" paragraph>
                                    {vuln.remediation}
                                  </Typography>
                                </>
                              )}
                            </Grid>
                            
                            <Grid item xs={12} md={6}>
                              <Typography variant="subtitle2" gutterBottom>
                                Technical Details
                              </Typography>
                              <Stack spacing={1}>
                                {vuln.pipeline && (
                                  <Chip 
                                    size="small" 
                                    label={`Pipeline: ${vuln.pipeline}`}
                                    icon={<BuildIcon />}
                                  />
                                )}
                                {vuln.file_path && (
                                  <Chip 
                                    size="small" 
                                    label={`File: ${vuln.file_path}`}
                                    icon={<CodeIcon />}
                                  />
                                )}
                                {vuln.language && (
                                  <Chip 
                                    size="small" 
                                    label={`Language: ${vuln.language}`}
                                  />
                                )}
                                {vuln.confidence && (
                                  <Chip 
                                    size="small" 
                                    label={`Confidence: ${vuln.confidence}`}
                                  />
                                )}
                              </Stack>
                            </Grid>
                          </Grid>
                        </Box>
                      </Collapse>
                    </TableCell>
                  </TableRow>
                </React.Fragment>
              ))}
            </TableBody>
          </Table>
        </TableContainer>

        {/* Pagination */}
        {showPagination && (
          <TablePagination
            rowsPerPageOptions={[10, 25, 50, 100]}
            component="div"
            count={totalCount}
            rowsPerPage={rowsPerPage}
            page={page}
            onPageChange={handleChangePage}
            onRowsPerPageChange={handleChangeRowsPerPage}
          />
        )}
      </CardContent>

      {/* Vulnerability Details Dialog */}
      <Dialog 
        open={detailsOpen} 
        onClose={() => setDetailsOpen(false)}
        maxWidth="lg"
        fullWidth
      >
        <DialogTitle>
          Vulnerability Details
          <IconButton
            aria-label="close"
            onClick={() => setDetailsOpen(false)}
            sx={{ position: 'absolute', right: 8, top: 8 }}
          >
            <CloseIcon />
          </IconButton>
        </DialogTitle>
        <DialogContent>
          {selectedVuln && (
            <Box>
              <Grid container spacing={2}>
                <Grid item xs={12} md={8}>
                  <Typography variant="h6" gutterBottom>
                    {selectedVuln.title || selectedVuln.vulnerability_id}
                  </Typography>
                  <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
                    {getSeverityChip(selectedVuln.severity)}
                    {getStatusChip(selectedVuln.status)}
                    {getCVSSScore(selectedVuln)}
                  </Box>
                  <Typography variant="body1" paragraph>
                    {selectedVuln.description}
                  </Typography>
                </Grid>
                
                <Grid item xs={12} md={4}>
                  <Typography variant="subtitle1" gutterBottom>
                    Metadata
                  </Typography>
                  <Stack spacing={1}>
                    <Typography variant="body2">
                      <strong>Package:</strong> {selectedVuln.package_name || 'N/A'}
                    </Typography>
                    <Typography variant="body2">
                      <strong>Version:</strong> {selectedVuln.version || 'N/A'}
                    </Typography>
                    <Typography variant="body2">
                      <strong>Scanner:</strong> {selectedVuln.scanner_type}
                    </Typography>
                    <Typography variant="body2">
                      <strong>Pipeline:</strong> {selectedVuln.pipeline || 'N/A'}
                    </Typography>
                    <Typography variant="body2">
                      <strong>Detected:</strong> {formatDateTime(selectedVuln.created_at)}
                    </Typography>
                  </Stack>
                </Grid>
              </Grid>
              
              {selectedVuln.remediation && (
                <Accordion sx={{ mt: 2 }}>
                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                    <Typography variant="subtitle1">Remediation Guidance</Typography>
                  </AccordionSummary>
                  <AccordionDetails>
                    <Typography variant="body2">
                      {selectedVuln.remediation}
                    </Typography>
                  </AccordionDetails>
                </Accordion>
              )}
              
              {selectedVuln.references && selectedVuln.references.length > 0 && (
                <Accordion sx={{ mt: 1 }}>
                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                    <Typography variant="subtitle1">References</Typography>
                  </AccordionSummary>
                  <AccordionDetails>
                    <Stack spacing={1}>
                      {selectedVuln.references.map((ref, index) => (
                        <Link key={index} href={ref} target="_blank" rel="noopener">
                          {ref}
                        </Link>
                      ))}
                    </Stack>
                  </AccordionDetails>
                </Accordion>
              )}
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDetailsOpen(false)}>Close</Button>
        </DialogActions>
      </Dialog>
    </Card>
  );
};

export default VulnerabilityTable;
