# ================================
# SecureOps DevSecOps Pipeline Monitor
# Environment Configuration Template
# ================================

# =================
# APPLICATION SETTINGS
# =================

# Environment (development, staging, production)
ENVIRONMENT=development

# Debug mode (true/false) - NEVER use true in production
DEBUG=true

# Application host and port
API_HOST=0.0.0.0
API_PORT=8000

# Secret key for JWT tokens (CHANGE THIS IN PRODUCTION!)
SECRET_KEY=your-super-secret-key-change-this-in-production

# JWT token expiration settings
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=7

# Admin user settings (created on first startup)
ADMIN_EMAIL=admin@secureops.local
ADMIN_PASSWORD=admin123
ADMIN_FIRST_NAME=Admin
ADMIN_LAST_NAME=User

# =================
# DATABASE CONFIGURATION
# =================

# PostgreSQL connection settings
DATABASE_URL=postgresql://secureops:secureops123@localhost:5432/secureops

# Database pool settings
DB_POOL_SIZE=20
DB_MAX_OVERFLOW=10
DB_POOL_TIMEOUT=30
DB_POOL_RECYCLE=3600

# Database backup settings
BACKUP_ENABLED=true
BACKUP_SCHEDULE="0 2 * * *"
BACKUP_RETENTION_DAYS=30

# =================
# REDIS CONFIGURATION
# =================

# Redis connection settings
REDIS_URL=redis://localhost:6379/0
REDIS_DB=0
REDIS_MAX_CONNECTIONS=20

# =================
# CELERY TASK QUEUE
# =================

# Celery broker and result backend
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0

# Celery configuration
CELERY_TASK_SERIALIZER=json
CELERY_RESULT_SERIALIZER=json
CELERY_ACCEPT_CONTENT=["json"]
CELERY_TIMEZONE=UTC
CELERY_ENABLE_UTC=true
CELERY_TASK_TRACK_STARTED=true
CELERY_TASK_TIME_LIMIT=1800
CELERY_TASK_SOFT_TIME_LIMIT=1200
CELERY_WORKER_MAX_TASKS_PER_CHILD=1000

# =================
# SECURITY SCANNER CONFIGURATION
# =================

# Trivy (Container/OS vulnerability scanner)
TRIVY_ENABLED=true
TRIVY_CACHE_DIR=/tmp/trivy-cache
TRIVY_TIMEOUT=600
TRIVY_SEVERITY=HIGH,CRITICAL
TRIVY_DB_REPOSITORY=ghcr.io/aquasecurity/trivy-db
TRIVY_JAVA_DB_REPOSITORY=ghcr.io/aquasecurity/trivy-java-db

# Safety (Python dependency scanner)
SAFETY_ENABLED=true
SAFETY_TIMEOUT=300
SAFETY_API_KEY=your-safety-api-key-here

# Bandit (Python SAST scanner)
BANDIT_ENABLED=true
BANDIT_TIMEOUT=300
BANDIT_CONFIDENCE=MEDIUM

# Docker scanner settings
DOCKER_SCANNER_ENABLED=true
DOCKER_SCANNER_TIMEOUT=600

# Secret scanner settings
SECRET_SCANNER_ENABLED=true
SECRET_SCANNER_TIMEOUT=300

# Policy checker settings
POLICY_CHECKER_ENABLED=true
POLICY_CHECKER_TIMEOUT=300

# =================
# CI/CD INTEGRATIONS
# =================

# GitHub Integration
GITHUB_ENABLED=false
GITHUB_TOKEN=ghp_your_github_token_here
GITHUB_WEBHOOK_SECRET=your-github-webhook-secret
GITHUB_API_URL=https://api.github.com

# GitLab Integration
GITLAB_ENABLED=false
GITLAB_TOKEN=glpat-your-gitlab-token-here
GITLAB_WEBHOOK_SECRET=your-gitlab-webhook-secret
GITLAB_API_URL=https://gitlab.com/api/v4

# Jenkins Integration
JENKINS_ENABLED=false
JENKINS_URL=http://localhost:8080
JENKINS_USERNAME=your-jenkins-username
JENKINS_TOKEN=your-jenkins-api-token

# Azure DevOps Integration
AZURE_DEVOPS_ENABLED=false
AZURE_DEVOPS_ORGANIZATION=your-organization
AZURE_DEVOPS_PROJECT=your-project
AZURE_DEVOPS_TOKEN=your-azure-devops-token

# =================
# EMAIL/NOTIFICATION SETTINGS
# =================

# SMTP configuration for email notifications
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your-email@gmail.com
SMTP_PASSWORD=your-app-password
SMTP_USE_TLS=true
SMTP_USE_SSL=false
EMAIL_FROM=noreply@secureops.local
EMAIL_TIMEOUT=30

# Slack integration (optional)
SLACK_ENABLED=false
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK
SLACK_CHANNEL=#security-alerts

# Microsoft Teams integration (optional)
TEAMS_ENABLED=false
TEAMS_WEBHOOK_URL=https://outlook.office.com/webhook/YOUR/TEAMS/WEBHOOK

# =================
# MONITORING & OBSERVABILITY
# =================

# Prometheus metrics
ENABLE_METRICS=true
METRICS_PORT=8000
METRICS_PATH=/metrics

# Logging configuration
LOG_LEVEL=INFO
LOG_FORMAT=json
LOG_FILE=/var/log/secureops/app.log

# Health check configuration
HEALTH_CHECK_TIMEOUT=10
HEALTH_CHECK_INTERVAL=30

# =================
# SECURITY SETTINGS
# =================

# Rate limiting
RATE_LIMIT_PER_MINUTE=60
RATE_LIMIT_BURST=10

# CORS settings
CORS_ORIGINS=["http://localhost:3000", "http://localhost:8080"]
CORS_ALLOW_CREDENTIALS=true

# File upload settings
MAX_UPLOAD_SIZE=104857600  # 100MB in bytes
ALLOWED_EXTENSIONS=json,yaml,yml,txt,log,tar,tar.gz,zip

# Session settings
SESSION_TIMEOUT=3600  # 1 hour in seconds

# =================
# COMPLIANCE & GOVERNANCE
# =================

# Supported compliance frameworks
SUPPORTED_FRAMEWORKS=owasp_top_10,nist_csf,soc2,gdpr,pci_dss,iso_27001,hipaa,sox
DEFAULT_COMPLIANCE_THRESHOLD=75

# Data retention policies
VULNERABILITY_RETENTION_DAYS=365
SCAN_RESULT_RETENTION_DAYS=90
ALERT_RETENTION_DAYS=180
AUDIT_LOG_RETENTION_DAYS=2555  # 7 years

# =================
# PERFORMANCE SETTINGS
# =================

# Async pool configuration
ASYNC_POOL_SIZE=100
HTTP_TIMEOUT=30
HTTP_RETRIES=3

# Cache configuration
CACHE_TTL=300  # 5 minutes
CACHE_MAX_SIZE=1000

# Concurrent processing limits
MAX_CONCURRENT_SCANS=10
MAX_CONCURRENT_REPORTS=5

# =================
# FEATURE FLAGS
# =================

# Enable/disable features
ENABLE_WEBSOCKETS=true
ENABLE_REAL_TIME_UPDATES=true
ENABLE_AUDIT_LOGGING=true
ENABLE_COMPLIANCE_TRACKING=true
ENABLE_VULNERABILITY_DEDUPLICATION=true
ENABLE_AUTO_REMEDIATION=false
ENABLE_MACHINE_LEARNING=false

# =================
# WEBHOOK CONFIGURATION
# =================

# Webhook settings for CI/CD integrations
WEBHOOK_TIMEOUT=30
WEBHOOK_RETRIES=3
WEBHOOK_SECRET=your-webhook-secret-key

# =================
# EXTERNAL API INTEGRATIONS
# =================

# NIST NVD API (for vulnerability data)
NVD_API_KEY=your-nvd-api-key-here
NVD_API_URL=https://services.nvd.nist.gov/rest/json/cves/2.0

# MITRE ATT&CK API
MITRE_API_URL=https://attack.mitre.org/api/

# CVE Details API
CVE_DETAILS_API_URL=https://cve.circl.lu/api/

# =================
# CONTAINER/KUBERNETES SETTINGS
# =================

# Container registry settings
REGISTRY_URL=docker.io
REGISTRY_USERNAME=your-registry-username
REGISTRY_PASSWORD=your-registry-password

# Kubernetes configuration
KUBECONFIG_PATH=/root/.kube/config
KUBERNETES_NAMESPACE=secureops

# =================
# DEVELOPMENT SETTINGS
# =================

# Development-only settings (remove in production)
ENABLE_SWAGGER_UI=true
ENABLE_REDOC=true
ENABLE_DEBUG_TOOLBAR=true
ENABLE_PROFILER=false

# Test database (for running tests)
TEST_DATABASE_URL=postgresql://secureops:secureops123@localhost:5432/secureops_test

# =================
# BACKUP & DISASTER RECOVERY
# =================

# Backup storage configuration
BACKUP_STORAGE_TYPE=local  # local, s3, gcs, azure
BACKUP_STORAGE_PATH=/var/backups/secureops

# AWS S3 backup configuration (if using S3)
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
AWS_S3_BUCKET=your-backup-bucket
AWS_S3_REGION=us-east-1

# Google Cloud Storage backup configuration (if using GCS)
GCS_CREDENTIALS_PATH=/path/to/credentials.json
GCS_BUCKET=your-backup-bucket

# Azure Blob Storage backup configuration (if using Azure)
AZURE_STORAGE_ACCOUNT=your-storage-account
AZURE_STORAGE_KEY=your-storage-key
AZURE_CONTAINER=your-backup-container

# =================
# SSL/TLS CONFIGURATION
# =================

# SSL settings
SSL_ENABLED=false
SSL_CERT_PATH=/etc/ssl/certs/secureops.crt
SSL_KEY_PATH=/etc/ssl/private/secureops.key
SSL_CA_PATH=/etc/ssl/certs/ca.crt

# =================
# TIMEZONE SETTINGS
# =================

# Application timezone
TIMEZONE=UTC

# =================
# CUSTOM SCANNER PLUGINS
# =================

# Custom scanner plugin directory
PLUGIN_DIRECTORY=/app/plugins

# Enable custom plugins
ENABLE_CUSTOM_PLUGINS=false

# =================
# NOTES FOR PRODUCTION DEPLOYMENT
# =================

# SECURITY CHECKLIST FOR PRODUCTION:
# 1. Change SECRET_KEY to a strong, unique value
# 2. Set DEBUG=false
# 3. Use strong passwords for all services
# 4. Configure proper SSL/TLS certificates
# 5. Set up proper firewall rules
# 6. Enable all security headers
# 7. Use secrets management (Kubernetes secrets, etc.)
# 8. Configure proper backup strategy
# 9. Set up monitoring and alerting
# 10. Review and configure all API keys and tokens

# KUBERNETES DEPLOYMENT NOTES:
# - Use Kubernetes secrets for sensitive values
# - Use ConfigMaps for non-sensitive configuration
# - Set proper resource limits and requests
# - Configure health checks and readiness probes
# - Use network policies for security
# - Set up proper RBAC
