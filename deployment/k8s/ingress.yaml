apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: secureops-ingress
  namespace: secureops
  labels:
    app: secureops
    component: ingress
  annotations:
    # Nginx Ingress Controller
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    
    # Rate Limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    
    # Security Headers
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' ws: wss:; frame-ancestors 'self';" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # CORS Configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range"
    
    # Upload Size
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    
    # WebSocket Support
    nginx.ingress.kubernetes.io/proxy-set-headers: |
      Connection "upgrade"
      Upgrade $http_upgrade
    
    # SSL Configuration (for cert-manager)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # Monitoring
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      access_log /var/log/nginx/secureops.access.log main;
spec:
  tls:
    - hosts:
        - secureops.example.com
        - api.secureops.example.com
        - monitoring.secureops.example.com
      secretName: secureops-tls
  rules:
    # Main Application
    - host: secureops.example.com
      http:
        paths:
          # API Routes
          - path: /api/(.*)
            pathType: Prefix
            backend:
              service:
                name: secureops-backend
                port:
                  number: 8000
          
          # WebSocket Connections
          - path: /ws/(.*)
            pathType: Prefix
            backend:
              service:
                name: secureops-backend
                port:
                  number: 8000
          
          # Static Assets and Frontend
          - path: /static/(.*)
            pathType: Prefix
            backend:
              service:
                name: secureops-frontend
                port:
                  number: 80
          
          # Frontend Application (catch-all)
          - path: /(.*)
            pathType: Prefix
            backend:
              service:
                name: secureops-frontend
                port:
                  number: 80
    
    # API Subdomain (optional dedicated API access)
    - host: api.secureops.example.com
      http:
        paths:
          - path: /(.*)
            pathType: Prefix
            backend:
              service:
                name: secureops-backend
                port:
                  number: 8000
    
    # Monitoring Subdomain
    - host: monitoring.secureops.example.com
      http:
        paths:
          # Prometheus
          - path: /prometheus/(.*)
            pathType: Prefix
            backend:
              service:
                name: prometheus
                port:
                  number: 9090
          
          # Grafana
          - path: /grafana/(.*)
            pathType: Prefix
            backend:
              service:
                name: grafana
                port:
                  number: 3000
          
          # Default to Grafana
          - path: /(.*)
            pathType: Prefix
            backend:
              service:
                name: grafana
                port:
                  number: 3000

---
# Alternative Ingress for Development (HTTP only)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: secureops-ingress-dev
  namespace: secureops
  labels:
    app: secureops
    component: ingress
    environment: development
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
    
    # Development Rate Limiting (more permissive)
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "50"
    
    # CORS for Development
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
    # Upload Size
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
spec:
  rules:
    - host: localhost
      http:
        paths:
          # API Routes
          - path: /api/(.*)
            pathType: Prefix
            backend:
              service:
                name: secureops-backend
                port:
                  number: 8000
          
          # WebSocket Connections
          - path: /ws/(.*)
            pathType: Prefix
            backend:
              service:
                name: secureops-backend
                port:
                  number: 8000
          
          # Frontend Application
          - path: /(.*)
            pathType: Prefix
            backend:
              service:
                name: secureops-frontend
                port:
                  number: 80
    
    # Development API access
    - host: api.localhost
      http:
        paths:
          - path: /(.*)
            pathType: Prefix
            backend:
              service:
                name: secureops-backend
                port:
                  number: 8000

---
# Network Policy for Ingress
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: secureops-ingress-policy
  namespace: secureops
  labels:
    app: secureops
    component: network-policy
spec:
  podSelector:
    matchLabels:
      app: secureops
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow traffic from ingress controller
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: TCP
          port: 8000
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 3000
    
    # Allow internal cluster communication
    - from:
        - namespaceSelector:
            matchLabels:
              name: secureops
      ports:
        - protocol: TCP
          port: 5432  # PostgreSQL
        - protocol: TCP
          port: 6379  # Redis
        - protocol: TCP
          port: 8000  # Backend
        - protocol: TCP
          port: 80    # Frontend
        - protocol: TCP
          port: 3000  # Grafana
        - protocol: TCP
          port: 9090  # Prometheus
  
  egress:
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    
    # Allow HTTPS outbound (for external APIs, scanners)
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
    
    # Allow internal cluster communication
    - to:
        - namespaceSelector:
            matchLabels:
              name: secureops
      ports:
        - protocol: TCP
          port: 5432  # PostgreSQL
        - protocol: TCP
          port: 6379  # Redis
        - protocol: TCP
          port: 8000  # Backend
        - protocol: TCP
          port: 80    # Frontend
        - protocol: TCP
          port: 3000  # Grafana
        - protocol: TCP
          port: 9090  # Prometheus
